# 制約条件を記述する constraints, route_ts, page_tsx
constraints = """
コンポーネントの200行程度のコード出力
3つのバックティックによるプログラム部分の記載と確実な閉じ
Tailwind CSSを使用したプロフェッショナルで使いやすいデザイン意識
ダイナミックで動的なコーヒーメーカー制御webアプリケーション作成
画像相当箇所への仮ボックス挿入
1ファイル1export、別ファイル内容の記載回避、importによるコンポーネント呼び出し
呼び出し例の記載回避
デフォルトエクスポートされたコンポーネントの中括弧不使用での直接インポート
ユーザーインターフェース（水量調節、温度設定、タイマー設定など）の考慮
自動洗浄機能とフィルター交換通知機能の実装
コーヒー抽出プロセスの制御と監視機能の考慮
保温機能の制御と温度管理の実装
安全機能（水不足検知、過熱防止）の実装
操作パネルのUI設計と実装
水タンク状態の監視と通知機能の考慮
レシピ保存と呼び出し機能の考慮
使用履歴とメンテナンス記録の管理機能の考慮
エネルギー効率の最適化と消費電力の監視機能の考慮
モバイルアプリ連携による遠隔操作機能の考慮
Next.js 13 App Routerの機能最大活用とパフォーマンス・SEO考慮
Supabaseを使用したデータ取得と更新
TypeScriptの適切な型定義によるコード安全性確保
Server ComponentsとClient Componentsの適切な使い分け
Client Componentsでのuse clientディレクティブ利用
lucide-reactを使用したコーヒーメーカー制御システムに適したアイコン選択
画面表示文字の日本語化
エラーのUI上での赤色表示
"""

page_tsx = """
page.tsxではデータを直接取得せず、コンポーネント内で完結するようにしてください。
hooksもこの中で完結してください。
必要なデータは仮のデータとしてファイル内に記述してください。
将来的にAPIからデータを取得する場合は、コンポーネント内でフェッチロジックを実装してください。
これにより、サーバーサイドでのデータフェッチングとセキュリティの向上が実現できます。
'use client'を使用してください
useEffectを使用した仮想データ（ファイル内に記述する）で実装
import Sidebar from '@/components/Sidebar'; 以外絶対に呼び出さないこと。
@/components/ などは絶対に呼び出さないこと
lucide-reactを使用してアイコンを表示する際は以下のみ利用
import { 
  Coffee, Droplet, Thermometer, Clock, 
  Power, Refresh, Settings, AlertTriangle 
} from 'lucide-react'
できる限り画像URLを使用
https://picsum.photos
"""

route_ts = """
app routerに従って書いてください。
すでにマイグレーション済みのコードを使用してください。
コーヒーメーカーの各機能（抽出、水量調節、温度設定、タイマー、保温、洗浄）に対応するルートを考慮してください。
"""